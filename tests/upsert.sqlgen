%option prefix="upsert"

%source-includes{
#include "sqlgen/tests/upsert.h"
#include "sqlite3.h"
}

%upgrade 1 {
	CREATE TABLE people (
		id INTEGER PRIMARY KEY,
		name TEXT NOT NULL,
		age INTEGER NOT NULL,
		UNIQUE(name)
	);
	INSERT INTO people (name, age) VALUES ('name1', 69), ('name2', 42);
}
%downgrade 0 {
	DROP TABLE people;
}

%query invalid,upsert(const char* name, int age) {
	type upsert
	stmt { SELECT lol this is invalid sql; }
}
%query valid,upsert(const char* name, int age) {
	type upsert
	table people
}

%query invalid,upsert_returning_id(const char* name, int age) {
	type upsert
	stmt { SELECT lol this is invalid sql; }
	return id
}
%query valid,upsert_returning_id(const char* name, int age) {
	type upsert
	table people
	return id
}

%query invalid,upsert_cb(const char* name, int age) {
	type upsert
	stmt { SELECT lol this is invalid sql; }
	callback int id, const char* name, int age
}
%query valid,upsert_cb(const char* name, int age) {
	type upsert
	table people
	callback int id, const char* name, int age
}

%query invalid,upsert_cb_returning_id(const char* name, int age) {
	type upsert
	stmt { SELECT lol this is invalid sql; }
	callback int id, const char* name, int age
	return id
}
%query valid,upsert_cb_returning_id(const char* name, int age) {
	type upsert
	table people
	callback int id, const char* name, int age
	return id
}

%query insert_or_set_age(const char* name, int age) {
	type upsert
	table people
	callback int id, const char* name, int age
}
